/**
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Node} Node
 * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike
 */
/**
 * Function called with a node to produce a new node.
 *
 * @callback MapFunction
 * @param {NodeLike|Node} node Current node being processed
 * @param {number} [index] Index of `node`, or `null`
 * @param {Parent} [parent] Parent of `node`, or `null`
 * @returns {NodeLike|Node} Node to be used in the new tree. Its children are not used: if the original node has children, those are mapped.
 */
/**
 * Unist utility to create a new tree by mapping all nodes with the given function.
 *
 * @param {NodeLike|Node} tree Tree to map
 * @param {MapFunction} iteratee Function that returns a new node
 * @returns {NodeLike|Node} New mapped tree.
 */
export function map(
  tree: NodeLike | Node,
  iteratee: MapFunction
): NodeLike | Node
export type Parent = import('unist').Parent
export type Position = import('unist').Position
export type Node = import('unist').Node
export type NodeLike = Record<string, unknown> & {
  type: string
  position?: Position | undefined
}
/**
 * Function called with a node to produce a new node.
 */
export type MapFunction = (
  node: NodeLike | Node,
  index?: number,
  parent?: Parent
) => NodeLike | Node
