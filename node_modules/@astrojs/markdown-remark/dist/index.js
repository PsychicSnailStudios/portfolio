var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import createCollectHeaders from "./rehype-collect-headers.js";
import scopedStyles from "./remark-scoped-styles.js";
import { remarkExpressions, loadRemarkExpressions } from "./remark-expressions.js";
import rehypeExpressions from "./rehype-expressions.js";
import rehypeIslands from "./rehype-islands.js";
import { remarkJsx, loadRemarkJsx } from "./remark-jsx.js";
import rehypeJsx from "./rehype-jsx.js";
import rehypeEscape from "./rehype-escape.js";
import remarkPrism from "./remark-prism.js";
import remarkShiki from "./remark-shiki.js";
import remarkUnwrap from "./remark-unwrap.js";
import { loadPlugins } from "./load-plugins.js";
import { unified } from "unified";
import markdown from "remark-parse";
import markdownToHtml from "remark-rehype";
import rehypeStringify from "rehype-stringify";
import rehypeRaw from "rehype-raw";
import matter from "gray-matter";
async function renderMarkdownWithFrontmatter(contents, opts) {
  const { data: frontmatter, content } = matter(contents);
  const value = await renderMarkdown(content, opts);
  return __spreadProps(__spreadValues({}, value), { frontmatter });
}
const DEFAULT_REMARK_PLUGINS = ["remark-gfm", "remark-smartypants"];
const DEFAULT_REHYPE_PLUGINS = ["rehype-slug"];
async function renderMarkdown(content, opts) {
  var _a;
  let { remarkPlugins = [], rehypePlugins = [] } = opts ?? {};
  const scopedClassName = (_a = opts == null ? void 0 : opts.$) == null ? void 0 : _a.scopedClassName;
  const mode = (opts == null ? void 0 : opts.mode) ?? "mdx";
  const syntaxHighlight = (opts == null ? void 0 : opts.syntaxHighlight) ?? "shiki";
  const shikiConfig = (opts == null ? void 0 : opts.shikiConfig) ?? {};
  const isMDX = mode === "mdx";
  const { headers, rehypeCollectHeaders } = createCollectHeaders();
  await Promise.all([loadRemarkExpressions(), loadRemarkJsx()]);
  let parser = unified().use(markdown).use(isMDX ? [remarkJsx, remarkExpressions] : []).use([remarkUnwrap]);
  if (remarkPlugins.length === 0 && rehypePlugins.length === 0) {
    remarkPlugins = [...DEFAULT_REMARK_PLUGINS];
    rehypePlugins = [...DEFAULT_REHYPE_PLUGINS];
  }
  const loadedRemarkPlugins = await Promise.all(loadPlugins(remarkPlugins));
  const loadedRehypePlugins = await Promise.all(loadPlugins(rehypePlugins));
  loadedRemarkPlugins.forEach(([plugin, opts2]) => {
    parser.use([[plugin, opts2]]);
  });
  if (scopedClassName) {
    parser.use([scopedStyles(scopedClassName)]);
  }
  if (syntaxHighlight === "shiki") {
    parser.use([await remarkShiki(shikiConfig, scopedClassName)]);
  } else if (syntaxHighlight === "prism") {
    parser.use([remarkPrism(scopedClassName)]);
  }
  parser.use([
    [
      markdownToHtml,
      {
        allowDangerousHtml: true,
        passThrough: ["raw", "mdxTextExpression", "mdxJsxTextElement", "mdxJsxFlowElement"]
      }
    ]
  ]);
  loadedRehypePlugins.forEach(([plugin, opts2]) => {
    parser.use([[plugin, opts2]]);
  });
  parser.use(isMDX ? [rehypeJsx, rehypeExpressions] : [rehypeRaw]).use(rehypeEscape).use(rehypeIslands);
  let result;
  try {
    const vfile = await parser.use([rehypeCollectHeaders]).use(rehypeStringify, { allowDangerousHtml: true }).process(content);
    result = vfile.toString();
  } catch (err) {
    console.error(err);
    throw err;
  }
  return {
    metadata: { headers, source: content, html: result.toString() },
    code: result.toString()
  };
}
var src_default = renderMarkdownWithFrontmatter;
export {
  DEFAULT_REHYPE_PLUGINS,
  DEFAULT_REMARK_PLUGINS,
  src_default as default,
  renderMarkdown,
  renderMarkdownWithFrontmatter
};
