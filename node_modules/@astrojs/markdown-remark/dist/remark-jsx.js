let mdxJsx;
let mdxJsxFromMarkdown;
let mdxJsxToMarkdown;
function remarkJsx(options) {
  let settings = options || {};
  let data = this.data();
  add("fromMarkdownExtensions", mdxJsxFromMarkdown);
  add("toMarkdownExtensions", mdxJsxToMarkdown);
  function add(field, value) {
    if (data[field])
      data[field].push(value);
    else
      data[field] = [value];
  }
}
async function loadRemarkJsx() {
  if (!mdxJsx) {
    const micromarkMdxJsx = await import("micromark-extension-mdx-jsx");
    mdxJsx = micromarkMdxJsx.mdxJsx;
  }
  if (!mdxJsxFromMarkdown || !mdxJsxToMarkdown) {
    const mdastUtilMdxJsx = await import("mdast-util-mdx-jsx");
    mdxJsxFromMarkdown = mdastUtilMdxJsx.mdxJsxFromMarkdown;
    mdxJsxToMarkdown = mdastUtilMdxJsx.mdxJsxToMarkdown;
  }
}
export {
  loadRemarkJsx,
  remarkJsx
};
