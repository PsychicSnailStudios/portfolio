let mdxExpression;
let mdxExpressionFromMarkdown;
let mdxExpressionToMarkdown;
function remarkExpressions(options) {
  let settings = options || {};
  let data = this.data();
  add("micromarkExtensions", mdxExpression({}));
  add("fromMarkdownExtensions", mdxExpressionFromMarkdown);
  add("toMarkdownExtensions", mdxExpressionToMarkdown);
  function add(field, value) {
    if (data[field])
      data[field].push(value);
    else
      data[field] = [value];
  }
}
async function loadRemarkExpressions() {
  if (!mdxExpression) {
    const micromarkMdxExpression = await import("micromark-extension-mdx-expression");
    mdxExpression = micromarkMdxExpression.mdxExpression;
  }
  if (!mdxExpressionFromMarkdown || !mdxExpressionToMarkdown) {
    const mdastUtilMdxExpression = await import("mdast-util-mdx-expression");
    mdxExpressionFromMarkdown = mdastUtilMdxExpression.mdxExpressionFromMarkdown;
    mdxExpressionToMarkdown = mdastUtilMdxExpression.mdxExpressionToMarkdown;
  }
}
export {
  loadRemarkExpressions,
  remarkExpressions
};
