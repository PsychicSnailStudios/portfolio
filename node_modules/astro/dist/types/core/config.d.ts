import type { AstroConfig, AstroUserConfig, CLIFlags } from '../@types/astro';
import type { Arguments as Flags } from 'yargs-parser';
import { z } from 'zod';
export declare const LEGACY_ASTRO_CONFIG_KEYS: Set<string>;
export declare const AstroConfigSchema: z.ZodObject<{
    adapter: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        hooks: z.ZodDefault<z.ZodObject<{}, "passthrough", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        hooks: {};
    }, {
        hooks?: {} | undefined;
        name: string;
    }>>;
    root: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL, string | undefined>;
    srcDir: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL, string | undefined>;
    publicDir: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL, string | undefined>;
    outDir: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, URL, string | undefined>;
    site: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>, string | undefined, string | undefined>;
    base: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodString>>, string, string | undefined>;
    trailingSlash: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"always">, z.ZodLiteral<"never">, z.ZodLiteral<"ignore">]>>>;
    build: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        format: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"file">, z.ZodLiteral<"directory">]>>>;
    }, "strip", z.ZodTypeAny, {
        format: "file" | "directory";
    }, {
        format?: "file" | "directory" | undefined;
    }>>>;
    server: z.ZodEffects<z.ZodDefault<z.ZodOptional<z.ZodObject<{
        host: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
        port: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        host: string | boolean;
        port: number;
    }, {
        host?: string | boolean | undefined;
        port?: number | undefined;
    }>>>, {
        host: string | boolean;
        port: number;
    }, {
        host?: string | boolean | undefined;
        port?: number | undefined;
    } | undefined>;
    integrations: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        hooks: z.ZodDefault<z.ZodObject<{}, "passthrough", z.ZodTypeAny, {}, {}>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        hooks: {};
    }, {
        hooks?: {} | undefined;
        name: string;
    }>, "many">>, {
        name: string;
        hooks: {};
    }[], {
        hooks?: {} | undefined;
        name: string;
    }[] | undefined>;
    style: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        postcss: z.ZodDefault<z.ZodOptional<z.ZodObject<{
            options: z.ZodAny;
            plugins: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            options?: any;
            plugins: any[];
        }, {
            options?: any;
            plugins: any[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        postcss: {
            options?: any;
            plugins: any[];
        };
    }, {
        postcss?: {
            options?: any;
            plugins: any[];
        } | undefined;
    }>>>;
    markdown: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        drafts: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        mode: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"md">, z.ZodLiteral<"mdx">]>>>;
        syntaxHighlight: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"shiki">, z.ZodLiteral<"prism">, z.ZodLiteral<false>]>>>;
        shikiConfig: z.ZodDefault<z.ZodOptional<z.ZodAny>>;
        remarkPlugins: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodAny, "many">>>;
        rehypePlugins: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodAny, "many">>>;
    }, "passthrough", z.ZodTypeAny, {
        shikiConfig?: any;
        drafts: boolean;
        mode: "md" | "mdx";
        syntaxHighlight: false | "shiki" | "prism";
        remarkPlugins: any[];
        rehypePlugins: any[];
    }, {
        drafts?: boolean | undefined;
        mode?: "md" | "mdx" | undefined;
        syntaxHighlight?: false | "shiki" | "prism" | undefined;
        shikiConfig?: any;
        remarkPlugins?: any[] | undefined;
        rehypePlugins?: any[] | undefined;
    }>>>;
    vite: z.ZodDefault<z.ZodOptional<z.ZodAny>>;
    experimental: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        ssr: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        integrations: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        integrations: boolean;
        ssr: boolean;
    }, {
        integrations?: boolean | undefined;
        ssr?: boolean | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    adapter?: {
        name: string;
        hooks: {};
    } | undefined;
    site?: string | undefined;
    vite?: any;
    root: URL;
    srcDir: URL;
    publicDir: URL;
    outDir: URL;
    base: string;
    trailingSlash: "always" | "never" | "ignore";
    build: {
        format: "file" | "directory";
    };
    server: {
        host: string | boolean;
        port: number;
    };
    integrations: {
        name: string;
        hooks: {};
    }[];
    style: {
        postcss: {
            options?: any;
            plugins: any[];
        };
    };
    markdown: {
        shikiConfig?: any;
        drafts: boolean;
        mode: "md" | "mdx";
        syntaxHighlight: false | "shiki" | "prism";
        remarkPlugins: any[];
        rehypePlugins: any[];
    };
    experimental: {
        integrations: boolean;
        ssr: boolean;
    };
}, {
    adapter?: {
        hooks?: {} | undefined;
        name: string;
    } | undefined;
    root?: string | undefined;
    srcDir?: string | undefined;
    publicDir?: string | undefined;
    outDir?: string | undefined;
    site?: string | undefined;
    base?: string | undefined;
    trailingSlash?: "always" | "never" | "ignore" | undefined;
    build?: {
        format?: "file" | "directory" | undefined;
    } | undefined;
    server?: {
        host?: string | boolean | undefined;
        port?: number | undefined;
    } | undefined;
    integrations?: {
        hooks?: {} | undefined;
        name: string;
    }[] | undefined;
    style?: {
        postcss?: {
            options?: any;
            plugins: any[];
        } | undefined;
    } | undefined;
    markdown?: {
        drafts?: boolean | undefined;
        mode?: "md" | "mdx" | undefined;
        syntaxHighlight?: false | "shiki" | "prism" | undefined;
        shikiConfig?: any;
        remarkPlugins?: any[] | undefined;
        rehypePlugins?: any[] | undefined;
    } | undefined;
    vite?: any;
    experimental?: {
        integrations?: boolean | undefined;
        ssr?: boolean | undefined;
    } | undefined;
}>;
/** Turn raw config values into normalized values */
export declare function validateConfig(userConfig: any, root: string, cmd: string): Promise<AstroConfig>;
interface LoadConfigOptions {
    cwd?: string;
    flags?: Flags;
    cmd: string;
    validate?: boolean;
}
/**
 * Resolve the file URL of the user's `astro.config.js|cjs|mjs|ts` file
 * Note: currently the same as loadConfig but only returns the `filePath`
 * instead of the resolved config
 */
export declare function resolveConfigURL(configOptions: Pick<LoadConfigOptions, 'cwd' | 'flags'>): Promise<URL | undefined>;
/** Attempt to load an `astro.config.mjs` file */
export declare function loadConfig(configOptions: LoadConfigOptions): Promise<AstroConfig>;
/** Attempt to resolve an Astro configuration object. Normalize, validate, and return. */
export declare function resolveConfig(userConfig: AstroUserConfig, root: string, flags: CLIFlags | undefined, cmd: string): Promise<AstroConfig>;
export declare function mergeConfig(defaults: Record<string, any>, overrides: Record<string, any>, isRoot?: boolean): Record<string, any>;
export {};
