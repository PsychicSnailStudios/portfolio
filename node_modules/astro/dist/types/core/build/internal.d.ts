import type { RenderedChunk } from 'rollup';
import type { PageBuildData, ViteID } from './types';
export interface BuildInternals {
    pureCSSChunks: Set<RenderedChunk>;
    hoistedScriptIdToHoistedMap: Map<string, Set<string>>;
    entrySpecifierToBundleMap: Map<string, string>;
    /**
     * A map for page-specific information.
     */
    pagesByComponent: Map<string, PageBuildData>;
    /**
     * A map for page-specific information by Vite ID (a path-like string)
     */
    pagesByViteID: Map<ViteID, PageBuildData>;
    /**
     * chunkToReferenceIdMap maps them to a hash id used to find the final file.
     * @deprecated This Map is only used for the legacy build.
     */
    chunkToReferenceIdMap: Map<string, string>;
    /**
     * This is a mapping of pathname to the string source of all collected inline <style> for a page.
     * @deprecated This Map is only used for the legacy build.
     */
    astroStyleMap: Map<string, string>;
    /**
     * This is a virtual JS module that imports all dependent styles for a page.
     * @deprecated This Map is only used for the legacy build.
     */
    astroPageStyleMap: Map<string, string>;
}
/**
 * Creates internal maps used to coordinate the CSS and HTML plugins.
 * @returns {BuildInternals}
 */
export declare function createBuildInternals(): BuildInternals;
export declare function trackPageData(internals: BuildInternals, component: string, pageData: PageBuildData, componentModuleId: string, componentURL: URL): void;
export declare function getPageDatasByChunk(internals: BuildInternals, chunk: RenderedChunk): Generator<PageBuildData, void, unknown>;
export declare function getPageDataByComponent(internals: BuildInternals, component: string): PageBuildData | undefined;
export declare function getPageDataByViteID(internals: BuildInternals, viteid: ViteID): PageBuildData | undefined;
export declare function hasPageDataByViteID(internals: BuildInternals, viteid: ViteID): boolean;
export declare function eachPageData(internals: BuildInternals): Generator<PageBuildData, void, undefined>;
