async function onVisible(astroId, options, getHydrateCallback) {
  const roots = document.querySelectorAll(`astro-root[uid="${astroId}"]`);
  if (roots.length === 0) {
    throw new Error(`Unable to find the root for the component ${options.name}`);
  }
  let innerHTML = null;
  let fragment = roots[0].querySelector(`astro-fragment`);
  if (fragment == null && roots[0].hasAttribute("tmpl")) {
    let template = roots[0].querySelector(`template[data-astro-template]`);
    if (template) {
      innerHTML = template.innerHTML;
      template.remove();
    }
  } else if (fragment) {
    innerHTML = fragment.innerHTML;
  }
  const cb = async () => {
    const hydrate = await getHydrateCallback();
    for (const root of roots) {
      hydrate(root, innerHTML);
    }
  };
  const io = new IntersectionObserver((entries) => {
    for (const entry of entries) {
      if (!entry.isIntersecting)
        continue;
      io.disconnect();
      cb();
      break;
    }
  });
  for (const root of roots) {
    for (let i = 0; i < root.children.length; i++) {
      const child = root.children[i];
      io.observe(child);
    }
  }
}
export {
  onVisible as default
};
