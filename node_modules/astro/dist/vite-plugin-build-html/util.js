import { getAttribute, hasAttribute, getTagName } from "@web/parse5-utils";
import { isStylesheetLink } from "./extract-assets.js";
const tagsWithSrcSet = /* @__PURE__ */ new Set(["img", "source"]);
function startsWithSrcRoot(pathname, srcRoot, srcRootWeb) {
  return pathname.startsWith(srcRoot) || pathname.startsWith(srcRootWeb) || `/${pathname}`.startsWith(srcRoot);
}
function isInSrcDirectory(node, attr, srcRoot, srcRootWeb) {
  const value = getAttribute(node, attr);
  return value ? startsWithSrcRoot(value, srcRoot, srcRootWeb) : false;
}
function isAstroInjectedLink(node) {
  return isStylesheetLink(node) && getAttribute(node, "data-astro-injected") === "";
}
function isBuildableLink(node, srcRoot, srcRootWeb) {
  if (isAstroInjectedLink(node)) {
    return true;
  }
  const href = getAttribute(node, "href");
  if (typeof href !== "string" || !href.length) {
    return false;
  }
  return startsWithSrcRoot(href, srcRoot, srcRootWeb);
}
function isBuildableImage(node, srcRoot, srcRootWeb) {
  if (getTagName(node) === "img") {
    const src = getAttribute(node, "src");
    return src ? startsWithSrcRoot(src, srcRoot, srcRootWeb) : false;
  }
  return false;
}
function hasSrcSet(node) {
  return tagsWithSrcSet.has(getTagName(node)) && !!getAttribute(node, "srcset");
}
function isHoistedScript(node) {
  return getTagName(node) === "script" && hasAttribute(node, "hoist");
}
export {
  hasSrcSet,
  isAstroInjectedLink,
  isBuildableImage,
  isBuildableLink,
  isHoistedScript,
  isInSrcDirectory
};
