var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { XMLValidator } from "fast-xml-parser";
import { PRETTY_FEED_V3 } from "./pretty-feed.js";
import { createCanonicalURL, isValidURL } from "./util.js";
function validateRSS(args) {
  const { rssData, srcFile } = args;
  if (!rssData.title)
    throw new Error(`[${srcFile}] rss.title required`);
  if (!rssData.description)
    throw new Error(`[${srcFile}] rss.description required`);
  if (rssData.item)
    throw new Error(`[${srcFile}] \`item: Function\` should be \`items: Item[]\``);
  if (!Array.isArray(rssData.items))
    throw new Error(`[${srcFile}] rss.items should be an array of items`);
}
function generateRSS(args) {
  validateRSS(args);
  const { srcFile, rssData, site } = args;
  if (rssData.item)
    throw new Error(`[${srcFile}] rss() \`item()\` function was deprecated, and is now \`items: object[]\`.`);
  let xml = `<?xml version="1.0" encoding="UTF-8"?>`;
  if (typeof rssData.stylesheet === "string") {
    xml += `<?xml-stylesheet href="${rssData.stylesheet}" type="text/xsl"?>`;
  }
  xml += `<rss version="2.0"`;
  if (rssData.xmlns) {
    for (const [k, v] of Object.entries(rssData.xmlns)) {
      xml += ` xmlns:${k}="${v}"`;
    }
  }
  xml += `>`;
  xml += `<channel>`;
  xml += `<title><![CDATA[${rssData.title}]]></title>`;
  xml += `<description><![CDATA[${rssData.description}]]></description>`;
  xml += `<link>${createCanonicalURL(site).href}</link>`;
  if (typeof rssData.customData === "string")
    xml += rssData.customData;
  for (const result of rssData.items) {
    xml += `<item>`;
    if (typeof result !== "object")
      throw new Error(`[${srcFile}] rss.items expected an object. got: "${JSON.stringify(result)}"`);
    if (!result.title)
      throw new Error(`[${srcFile}] rss.items required "title" property is missing. got: "${JSON.stringify(result)}"`);
    if (!result.link)
      throw new Error(`[${srcFile}] rss.items required "link" property is missing. got: "${JSON.stringify(result)}"`);
    xml += `<title><![CDATA[${result.title}]]></title>`;
    const itemLink = isValidURL(result.link) ? result.link : createCanonicalURL(result.link, site).href;
    xml += `<link>${itemLink}</link>`;
    xml += `<guid>${itemLink}</guid>`;
    if (result.description)
      xml += `<description><![CDATA[${result.description}]]></description>`;
    if (result.pubDate) {
      if (typeof result.pubDate === "number" || typeof result.pubDate === "string") {
        result.pubDate = new Date(result.pubDate);
      } else if (result.pubDate instanceof Date === false) {
        throw new Error("[${filename}] rss.item().pubDate must be a Date");
      }
      xml += `<pubDate>${result.pubDate.toUTCString()}</pubDate>`;
    }
    if (typeof result.customData === "string")
      xml += result.customData;
    xml += `</item>`;
  }
  xml += `</channel></rss>`;
  const isValid = XMLValidator.validate(xml);
  if (isValid !== true) {
    throw new Error(isValid);
  }
  return xml;
}
function generateRSSStylesheet() {
  return PRETTY_FEED_V3;
}
function generateRssFunction(site, route) {
  return function rssUtility(args) {
    if (!site) {
      throw new Error(`[${route.component}] rss() tried to generate RSS but "site" missing in astro.config.mjs`);
    }
    let result = {};
    const _a = args, { dest } = _a, rssData = __objRest(_a, ["dest"]);
    const feedURL = dest || "/rss.xml";
    if (rssData.stylesheet === true) {
      rssData.stylesheet = feedURL.replace(/\.xml$/, ".xsl");
      result.xsl = {
        url: rssData.stylesheet,
        content: generateRSSStylesheet()
      };
    } else if (typeof rssData.stylesheet === "string") {
      result.xsl = {
        url: rssData.stylesheet
      };
    }
    result.xml = {
      url: feedURL,
      content: generateRSS({ rssData, site, srcFile: route.component })
    };
    return result;
  };
}
export {
  generateRSS,
  generateRSSStylesheet,
  generateRssFunction,
  validateRSS
};
