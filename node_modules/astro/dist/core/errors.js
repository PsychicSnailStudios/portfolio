import eol from "eol";
import fs from "fs";
import { codeFrame, createSafeError } from "./util.js";
function cleanErrorStack(stack) {
  return stack.split(/\n/g).filter((l) => /^\s*at/.test(l)).join("\n");
}
function fixViteErrorMessage(_err, server) {
  const err = createSafeError(_err);
  server.ssrFixStacktrace(err);
  if (err.message === "import.meta.glob() can only accept string literals.") {
    err.message = "Astro.glob() and import.meta.glob() can only accept string literals.";
  }
  return err;
}
function collectErrorMetadata(e) {
  if (e.stack) {
    e.stack = eol.lf(e.stack);
  }
  if (Array.isArray(e.errors)) {
    const { location, pluginName, text } = e.errors[0];
    const err = e;
    if (location) {
      err.loc = { file: location.file, line: location.line, column: location.column };
      err.id = err.id || (location == null ? void 0 : location.file);
    }
    const possibleFilePath = err.pluginCode || err.id || (location == null ? void 0 : location.file);
    if (possibleFilePath && !err.frame) {
      try {
        const fileContents = fs.readFileSync(possibleFilePath, "utf8");
        err.frame = codeFrame(fileContents, err.loc);
      } catch {
      }
    }
    if (pluginName) {
      err.plugin = pluginName;
    }
    return err;
  }
  return e;
}
export {
  cleanErrorStack,
  collectErrorMetadata,
  fixViteErrorMessage
};
