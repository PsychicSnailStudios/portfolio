import astroRemark from "@astrojs/markdown-remark";
import { serializeRouteData } from "../routing/index.js";
import { eachPageData } from "./internal.js";
import { addRollupInput } from "./add-rollup-input.js";
import { virtualModuleId as pagesVirtualModuleId } from "./vite-plugin-pages.js";
import { BEFORE_HYDRATION_SCRIPT_ID } from "../../vite-plugin-scripts/index.js";
const virtualModuleId = "@astrojs-ssr-virtual-entry";
const resolvedVirtualModuleId = "\0" + virtualModuleId;
const manifestReplace = "@@ASTRO_MANIFEST_REPLACE@@";
function vitePluginSSR(buildOpts, internals, adapter) {
  return {
    name: "@astrojs/vite-plugin-astro-ssr",
    enforce: "post",
    options(opts) {
      return addRollupInput(opts, [virtualModuleId]);
    },
    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId;
      }
    },
    load(id) {
      if (id === resolvedVirtualModuleId) {
        return `import * as adapter from '${adapter.serverEntrypoint}';
import * as _main from '${pagesVirtualModuleId}';
import { deserializeManifest as _deserializeManifest } from 'astro/app';
const _manifest = Object.assign(_deserializeManifest('${manifestReplace}'), {
	pageMap: _main.pageMap,
	renderers: _main.renderers
});
const _args = ${adapter.args ? JSON.stringify(adapter.args) : "undefined"};

${adapter.exports ? `const _exports = adapter.createExports(_manifest, _args);
${adapter.exports.map((name) => `export const ${name} = _exports['${name}'];`).join("\n")}
${adapter.exports.includes("_default") ? `export default _default` : ""}
` : ""}
const _start = 'start';
if(_start in adapter) {
	adapter[_start](_manifest, _args);
}`;
      }
      return void 0;
    },
    generateBundle(_opts, bundle) {
      const manifest = buildManifest(buildOpts, internals);
      for (const [_chunkName, chunk] of Object.entries(bundle)) {
        if (chunk.type === "asset")
          continue;
        if (chunk.modules[resolvedVirtualModuleId]) {
          const exp = new RegExp(`['"]${manifestReplace}['"]`);
          const code = chunk.code;
          chunk.code = code.replace(exp, () => {
            return JSON.stringify(manifest);
          });
        }
      }
    }
  };
}
function buildManifest(opts, internals) {
  const { astroConfig } = opts;
  const routes = [];
  for (const pageData of eachPageData(internals)) {
    const scripts = Array.from(pageData.scripts);
    if (pageData.hoistedScript) {
      scripts.unshift(pageData.hoistedScript);
    }
    routes.push({
      file: "",
      links: Array.from(pageData.css),
      scripts,
      routeData: serializeRouteData(pageData.route)
    });
  }
  const entryModules = Object.fromEntries(internals.entrySpecifierToBundleMap.entries());
  entryModules[BEFORE_HYDRATION_SCRIPT_ID] = "data:text/javascript;charset=utf-8,//[no before-hydration script]";
  const ssrManifest = {
    routes,
    site: astroConfig.site,
    markdown: {
      render: [astroRemark, astroConfig.markdown]
    },
    pageMap: null,
    renderers: [],
    entryModules
  };
  return ssrManifest;
}
export {
  virtualModuleId,
  vitePluginSSR
};
