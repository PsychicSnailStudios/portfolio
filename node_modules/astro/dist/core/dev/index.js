import { performance } from "perf_hooks";
import * as vite from "vite";
import {
  runHookConfigDone,
  runHookConfigSetup,
  runHookServerDone,
  runHookServerSetup,
  runHookServerStart
} from "../../integrations/index.js";
import { createVite } from "../create-vite.js";
import { info, warn, warnIfUsingExperimentalSSR } from "../logger/core.js";
import { nodeLogOptions } from "../logger/node.js";
import * as msg from "../messages.js";
import { apply as applyPolyfill } from "../polyfill.js";
async function dev(config, options = { logging: nodeLogOptions }) {
  var _a;
  const devStart = performance.now();
  applyPolyfill();
  config = await runHookConfigSetup({ config, command: "dev" });
  const { host, port } = config.server;
  const viteConfig = await createVite({
    mode: "development",
    server: { host }
  }, { astroConfig: config, logging: options.logging, mode: "dev" });
  await runHookConfigDone({ config });
  warnIfUsingExperimentalSSR(options.logging, config);
  const viteServer = await vite.createServer(viteConfig);
  runHookServerSetup({ config, server: viteServer });
  await viteServer.listen(port);
  const devServerAddressInfo = viteServer.httpServer.address();
  const site = config.site ? new URL(config.base, config.site) : void 0;
  info(options.logging, null, msg.devStart({
    startupTime: performance.now() - devStart,
    config,
    devServerAddressInfo,
    site,
    https: !!((_a = viteConfig.server) == null ? void 0 : _a.https)
  }));
  const currentVersion = "1.0.0-beta.2";
  if (currentVersion.includes("-")) {
    warn(options.logging, null, msg.prerelease({ currentVersion }));
  }
  await runHookServerStart({ config, address: devServerAddressInfo });
  return {
    address: devServerAddressInfo,
    stop: async () => {
      await viteServer.close();
      await runHookServerDone({ config });
    }
  };
}
export {
  dev as default
};
