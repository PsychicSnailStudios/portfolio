import {
  bold,
  dim,
  red,
  green,
  underline,
  yellow,
  bgYellow,
  cyan,
  bgGreen,
  black,
  bgRed,
  bgWhite
} from "kleur/colors";
import os from "os";
import { collectErrorMetadata, cleanErrorStack } from "./errors.js";
import { emoji, getLocalAddress, padMultilineString } from "./util.js";
const PREFIX_PADDING = 6;
function req({
  url,
  statusCode,
  reqTime
}) {
  let color = dim;
  if (statusCode >= 500)
    color = red;
  else if (statusCode >= 400)
    color = yellow;
  else if (statusCode >= 300)
    color = dim;
  else if (statusCode >= 200)
    color = green;
  return `${bold(color(`${statusCode}`.padStart(PREFIX_PADDING)))} ${url.padStart(40)} ${reqTime ? dim(Math.round(reqTime) + "ms") : ""}`.trim();
}
function reload({ file }) {
  return `${green("reload".padStart(PREFIX_PADDING))} ${file}`;
}
function hmr({ file }) {
  return `${green("update".padStart(PREFIX_PADDING))} ${file}`;
}
function devStart({
  startupTime,
  devServerAddressInfo,
  config,
  https,
  site
}) {
  const version = "1.0.0-beta.2";
  const rootPath = site ? site.pathname : "/";
  const localPrefix = `${dim("\u2503")} Local    `;
  const networkPrefix = `${dim("\u2503")} Network  `;
  const { address: networkAddress, port } = devServerAddressInfo;
  const localAddress = getLocalAddress(networkAddress, config.server.host);
  const networkLogging = getNetworkLogging(config.server.host);
  const toDisplayUrl = (hostname) => `${https ? "https" : "http"}://${hostname}:${port}${rootPath}`;
  let addresses = [];
  if (networkLogging === "none") {
    addresses = [`${localPrefix}${bold(cyan(toDisplayUrl(localAddress)))}`];
  } else if (networkLogging === "host-to-expose") {
    addresses = [
      `${localPrefix}${bold(cyan(toDisplayUrl(localAddress)))}`,
      `${networkPrefix}${dim("use --host to expose")}`
    ];
  } else {
    addresses = Object.values(os.networkInterfaces()).flatMap((networkInterface) => networkInterface ?? []).filter((networkInterface) => (networkInterface == null ? void 0 : networkInterface.address) && (networkInterface == null ? void 0 : networkInterface.family) === "IPv4").map(({ address }) => {
      if (address.includes("127.0.0.1")) {
        const displayAddress = address.replace("127.0.0.1", localAddress);
        return `${localPrefix}${bold(cyan(toDisplayUrl(displayAddress)))}`;
      } else {
        return `${networkPrefix}${bold(cyan(toDisplayUrl(address)))}`;
      }
    }).sort((msg) => msg.startsWith(localPrefix) ? -1 : 1);
  }
  const messages = [
    `${emoji("\u{1F680} ", "")}${bgGreen(black(` astro `))} ${green(`v${version}`)} ${dim(`started in ${Math.round(startupTime)}ms`)}`,
    "",
    ...addresses,
    ""
  ];
  return messages.map((msg) => `  ${msg}`).join("\n");
}
function prerelease({ currentVersion }) {
  const tag = currentVersion.split("-").slice(1).join("-").replace(/\..*$/, "");
  const badge = bgYellow(black(` ${tag} `));
  const headline = yellow(`\u25B6 This is a ${badge} prerelease build`);
  const warning = `  Feedback? ${underline("https://astro.build/issues")}`;
  return [headline, warning, ""].map((msg) => `  ${msg}`).join("\n");
}
function success(message, tip) {
  const badge = bgGreen(black(` success `));
  const headline = green(message);
  const footer = tip ? `
  \u25B6 ${tip}` : void 0;
  return ["", `${badge} ${headline}`, footer].filter((v) => v !== void 0).map((msg) => `  ${msg}`).join("\n");
}
function failure(message, tip) {
  const badge = bgRed(black(` error `));
  const headline = red(message);
  const footer = tip ? `
  \u25B6 ${tip}` : void 0;
  return ["", `${badge} ${headline}`, footer].filter((v) => v !== void 0).map((msg) => `  ${msg}`).join("\n");
}
function cancelled(message, tip) {
  const badge = bgYellow(black(` cancelled `));
  const headline = yellow(message);
  const footer = tip ? `
  \u25B6 ${tip}` : void 0;
  return ["", `${badge} ${headline}`, footer].filter((v) => v !== void 0).map((msg) => `  ${msg}`).join("\n");
}
function portInUse({ port }) {
  return `Port ${port} in use. Trying a new one\u2026`;
}
const LOCAL_IP_HOSTS = /* @__PURE__ */ new Set(["localhost", "127.0.0.1"]);
function getNetworkLogging(host) {
  if (host === false) {
    return "host-to-expose";
  } else if (typeof host === "string" && LOCAL_IP_HOSTS.has(host)) {
    return "none";
  } else {
    return "visible";
  }
}
function formatConfigErrorMessage(err) {
  const errorList = err.issues.map((issue) => `  ! ${bold(issue.path.join("."))}  ${red(issue.message + ".")}`);
  return `${red("[config]")} Astro found issue(s) with your configuration:
${errorList.join("\n")}`;
}
function formatErrorMessage(_err, args = []) {
  const err = collectErrorMetadata(_err);
  args.push(`${bgRed(black(` error `))}${red(bold(padMultilineString(err.message)))}`);
  if (err.id) {
    args.push(`  ${bold("File:")}`);
    args.push(red(`    ${err.id}`));
  }
  if (err.frame) {
    args.push(`  ${bold("Code:")}`);
    args.push(red(padMultilineString(err.frame, 4)));
  }
  if (args.length === 1 && err.stack) {
    args.push(dim(cleanErrorStack(err.stack)));
  } else if (err.stack) {
    args.push(`  ${bold("Stacktrace:")}`);
    args.push(dim(cleanErrorStack(err.stack)));
    args.push(``);
  }
  return args.join("\n");
}
function printHelp({
  commandName,
  headline,
  usage,
  commands,
  flags
}) {
  const linebreak = () => "";
  const title = (label) => `  ${bgWhite(black(` ${label} `))}`;
  const table = (rows, opts) => {
    const split = rows.some((row) => {
      const message2 = `${opts.prefix}${" ".repeat(opts.padding)}${row[1]}`;
      return message2.length > process.stdout.columns;
    });
    let raw = "";
    for (const row of rows) {
      raw += `${opts.prefix}${bold(`${row[0]}`.padStart(opts.padding - opts.prefix.length))}`;
      if (split)
        raw += "\n    ";
      raw += dim(row[1]) + "\n";
    }
    return raw.slice(0, -1);
  };
  let message = [];
  if (headline) {
    message.push(linebreak(), `  ${bgGreen(black(` ${commandName} `))} ${green(`v${"1.0.0-beta.2"}`)} ${headline}`);
  }
  if (usage) {
    message.push(linebreak(), `  ${green(commandName)} ${bold(usage)}`);
  }
  if (commands) {
    message.push(linebreak(), title("Commands"), table(commands, { padding: 28, prefix: "  astro " }));
  }
  if (flags) {
    message.push(linebreak(), title("Flags"), table(flags, { padding: 28, prefix: "  " }));
  }
  console.log(message.join("\n"));
}
export {
  cancelled,
  devStart,
  failure,
  formatConfigErrorMessage,
  formatErrorMessage,
  getNetworkLogging,
  hmr,
  portInUse,
  prerelease,
  printHelp,
  reload,
  req,
  success
};
